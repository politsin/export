<?php

/**
 * @file
 * Drupal Module: export.
 */

/**
 * Implements hook_permission().
 */
function export_permission() {
  return [
    'guest' => [
      'title' => t('Guest export'),
    ],
  ];
}

/**
 * Hook_menu.
 */
function export_menu() {
  $items = [];
  $items['druio-export'] = [
    'title' => 'Projects export',
    'page callback' => '_export_output',
    'access arguments' => ['access comments'],
    'type' => MENU_CALLBACK,
  ];
  $items['druio-export/%'] = [
    'title' => 'Projects export',
    'page callback' => '_export_output',
    'access arguments' => ['access comments'],
    'type' => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Export.
 */
function _export_output() {
  $output = 'export';
  $limit = 100;
  $nodetypes = [
    'question',
    'order',
    'event',
    'answer',
    'project',
    'post',
    'book',
    'page',
  ];
  $terms = [
    'categories',
    'cities',
    'drupal_versions',
    'project_development_status',
    'project_maintenance_status',
    'project_types',
    'tags',
    'order_status',
  ];
  $output = '';

  if (TRUE) {
    if (!arg(1)) {
      $output .= "<h2>Users</h2>";
      $output .= "<a target='_blank' href='/druio-export/users'>
       http://617-dru-d7.n2.s1dev.ru/druio-export/users
      </a> |
      <a target='_blank' href='/druio-export/users/json'>
       JSON
      </a><br>";
      $output .= "<h2>Comments</h2>";
      $output .= "<a target='_blank' href='/druio-export/comments'>
       http://617-dru-d7.n2.s1dev.ru/druio-export/comments
      </a> |
      <a target='_blank' href='/druio-export/comments/json'>
       JSON
      </a><br>";
      $output .= "<h2>Nodes</h2>";
      foreach ($nodetypes as $nodetype) {
        $output .= "<a target='_blank' href='/druio-export/node/{$nodetype}'>
         http://617-dru-d7.n2.s1dev.ru/druio-export/node/{$nodetype}
        </a> |
        <a target='_blank' href='/druio-export/node/{$nodetype}/json'>
         JSON
        </a><br>";
      }
      $output .= "<h2>Terms</h2>";
      foreach ($terms as $term) {
        $output .= "<a target='_blank' href='/druio-export/term/{$term}'>
         http://617-dru-d7.n2.s1dev.ru/druio-export/term/{$term}
        </a> |
        <a target='_blank' href='/druio-export/term/{$term}/json'>
         JSON
        </a><br>";
      }
    }
    else {
      $type = arg(2);
      if (arg(1) == 'node') {
        $data = _export_query_nodes($type, $limit);
      }
      if (arg(1) == 'users') {
        $data = _export_query_users($limit);
      }
      if (arg(1) == 'term') {
        $data = _export_query_terms($type, $limit);
      }
      if (arg(1) == 'comments') {
        $data = _export_query_comments($limit);
      }
    }
  }
  else {
    $output = 'Wrong access';
    $data = $output;
  }

  if (arg(2) == 'json' || arg(3) == 'json') {
    drupal_add_http_header('Content-Type', 'application/json; utf-8');
    print json_encode($data, JSON_UNESCAPED_UNICODE);
  }
  else {
    dsm($data);
    return $output;
  }
}

/**
 * Query users.
 */
function _export_query_comments($limit = FALSE) {
  $comments = [];
  $debug = TRUE;
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'comment')
    ->execute();
  if ($limit) {
    $query->range(0, $limit);
  }
  $result = $query->execute();
  if (!empty($result['comment'])) {
    foreach ($result['comment'] as $cid => $record) {
      $cid = $record->cid;
      $comment = comment_load($cid);
      //$ewrapper = entity_metadata_wrapper('comment', $comment);
      $lang = $comment->language;
      $comments[$cid] = [
        'com' => $comment,
        'cid'    => $cid,
        'pid'    => $comment->pid,
        'nid'    => $comment->nid,
        'uid'    => $comment->uid,
        'subject' => $comment->subject,
        'hostname'   => $comment->hostname,
        'created'   => $comment->created,
        'changed'   => $comment->changed,
        'status'   => $comment->status,
        'thread'   => $comment->thread,
        'name'   => $comment->name,
        'uuid'   => $comment->uuid,
        'body'   => $comment->comment_body[$lang][0]['value'],
        'path' => drupal_get_path_alias('comment/' . $cid),
      ];
    }
  }
  return $comments;
}

/**
 * Query venues.
 */
function _export_query_nodes($type, $limit = FALSE) {
  $nodes = [];
  if (TRUE) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $type)
      ->propertyCondition('status', 1)
      ->propertyOrderBy('changed', 'DESC')
      ->addMetaData('account', user_load(1));
    if ($limit) {
      $query->range(0, $limit);
    }
    $result = $query->execute();
    $is_param = !empty($result['node']) && is_array($result['node']);
    if ($is_param) {
      $nids = array_keys($result['node']);
      $nodes = node_load_multiple($nids);
      foreach ($nodes as $nid => $node) {
        $data[$nid] = _export_node_to_array($node);
      }
    }
  }
  return $data;
}

/**
 * Query users.
 */
function _export_query_terms($vocab, $limit = FALSE) {
  $terms = [];

  $voc = taxonomy_vocabulary_machine_name_load($vocab);
  $vid = $voc->vid;
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', (int) $vid, '=')
    ->execute();
  $result = $query->execute();
  if (!empty($result['taxonomy_term'])) {
    foreach ($result['taxonomy_term'] as $tid => $record) {
      $tid = $record->tid;
      $term = taxonomy_term_load($tid);
      $ewrapper = entity_metadata_wrapper('taxonomy_term', $termin);
      $terms[$tid] = [
        'tid'    => $term->tid,
        'name'   => $term->name,
        'vid'    => $term->vid,
        'vname'  => $term->vocabulary_machine_name,
        'weight' => $term->weight,
        'uuid'   => $term->uuid,
        'description'   => $term->description,
        'path' => drupal_get_path_alias('taxonomy/term/' . $tid),
      ];
    }
  }
  return $terms;
}

/**
 * Query users.
 */
function _export_query_users($limit = FALSE) {
  $users = [];
  $debug = TRUE;
  $query = db_select('users', 'u');
  $query->fields('u', array('name', 'uid'))
    ->addMetaData('account', user_load(1));
  if ($limit) {
    $query->range(0, $limit);
  }
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $uid = $record['uid'];
    $user = user_load($uid);

    $ewrapper = entity_metadata_wrapper('user', $user);
    $status = $user->status;

    if ($status) {
      if ($uid != 1) {
        $users[$uid] = [
          'user' => $user,
          'uid'   => $uid,
          'uuid'  => $user->uuid,
          'name' => $user->name,
          'mail' => $user->mail,
          'created' => $user->created,
          'access' => $user->access,
          'login' => $user->login,
          'status' => $user->status,
          'timezone' => $user->timezone,
          'path' => drupal_get_path_alias('user/' . $uid),
        ];
        if ($debug) {
          $users[$uid]['mail'] = $uid . "@druio.ru";
        }
      }
    }
  }
  return $users;
}

/**
 * Helper.
 */
function _export_node_to_array($node) {

  $ewrapper = entity_metadata_wrapper('node', $node);
  $fields = [];
  $refs   = [];
  foreach ($node as $key => $val) {
    if ($key == 'body') {
      $fields[$key] = $ewrapper->$key->value();
    }

    if (substr($key, 0, 5) == 'field') {
      $value = $ewrapper->$key->value();
      if (is_array($value) && !empty($value)) {
        foreach ($value as $k => $v) {
          if (is_object($v)) {
            if (property_exists($v, 'tid')) {

              $refs[$key][$k] = [
                'id'   => $v->tid,
                'uuid'  => $v->uuid,
                'name'  => $v->name,
              ];
            }
            elseif (property_exists($v, 'nid')) {
              $ref_node = node_load($v->nid);
              $refs[$key][$k] = _export_node_to_array($ref_node);
              $refs[$key][$k] = [
                'id'   => $v->nid,
                'uuid'  => $v->uuid,
                'title'  => $v->title,
                'type'  => $v->type,
              ];
            }
            else {
              dsm($v);
            }
          }
          else {
            $refs[$key][$k] = $v;
          }
        }

      }
      else {
        if (is_object($value)) {
          $refer = $ewrapper->$key;

          $ref_type = $refer->getBundle();

          if ($ref_type == 'user') {
            $refs[$key] = [
              'type' => $ref_type,
              'uid'  => $refer->getIdentifier(),
              'uuid'  => $refer->uuid->value(),
            ];
          }
          elseif (property_exists($value, 'nid')) {
            $ref_nid  = $value->nid;
            $ref_node = node_load($ref_nid);
            $refs[$key] = _export_node_to_array($ref_node);
          }
          elseif (FALSE) {
            $ref_nid  = $refer->getIdentifier();
            $ref_node = node_load($ref_nid);
            $refs[$key] = _export_node_to_array($ref_node);
          }
          else {
            $refs[$key] = [
              'type' => $ref_type,
              'id'  => $refer->getIdentifier(),
              'uuid'  => $refer->uuid->value(),
              'name'  => $refer->name->value(),
            ];
          }
        }
        else {
          $fields[$key] = $ewrapper->$key->value();
        }
      }
    }
  }

  $data = [
    'nid'   => $node->nid,
    'title' => $node->title,
    'info'  => [
      'status'  => $node->status,
      'promote' => $node->promote,
      'sticky'  => $node->sticky,
      'created' => $node->created,
      'changed' => $node->changed,
      'type'    => $node->type,
      'uuid'    => $node->uuid,
      'uid'     => $node->uid,
      'uname'   => $node->name,
      'path'    => drupal_get_path_alias('node/' . $node->nid),
    ],
    'refs'   => $refs,
    'fields' => $fields,
  ];
  return $data;
}
